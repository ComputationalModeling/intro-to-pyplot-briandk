dd <- cbind(nsmall, rep.int(0, times = length(nsmall)))
dd
ValuePerVariable(dd, 4)
x <- c(,,3,5,)
x <- read.csv("~/Desktop/csvtest.csv")
x <- read.csv(file = "~/Desktop/csvtest.csv")
x <- read.table(file = "~/Desktop/csvtest.csv")
x <- read.csv(file = "~/Desktop/csvtest.csv", header = F)
x
summary(x)
x <- as.factor(x)
x
x <- as.data.frame(x)
x
x$V2 <- as.factor(x$V2)
x
summary(x)
??na
?is.na
as.na
??as.na
.code.to.na
code.to.na
library(norm)
?cat
?sprintf
RColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
?gl
gl(2, 4, 8)
?reorder
?reorder.factor
?relevel
?reorder
??order
?relevel
??brewer
brewer.pal
?brewer.pal
display.brewer.pal
library(ggplot2)
display.brewer.pal
display.brewer.all
brewer.pal.info
scale\_brewer
RColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
df <- data.frame(a = LETTERS[sample(5, 15, replace=TRUE)], y = rnorm(15))
df
str(df)
combine_factor(df$a, c(1,2,2,1,2))
library(ggplot2)
combine_factor(df$a, c(1,2,2,1,2))
combine_factor(df$a, c(1:4, 1))
?reorder
combine_factor(df$a, c(1:4, 1))
percent <- tapply(abs(df$y), df$a, sum)
percent
combine_factor(f, c(order(percent)[1:3]))
(f <- reorder(df$a, df$y))
combine_factor(f, c(order(percent)[1:3]))
df <- data.frame(a = LETTERS[sample(5, 15, replace=TRUE)], y = rnorm(15))
df
LETTERS
levels(df$a)
combine_factor(df$a, c(1,1,2,2,3), other.label = c("low","med","hi"))
df
combine_factor(df$a, variable=c("low","low","med","med","hi"))
combine_factor(df$a, variable=c("low","low","med","med","hi"), other.label = c("low","low","med","med","hi"))
combine_factor
labels
?labels
labels(df$a)
levels(df$a)
combine_factor(df$a, c(1:4, 1))
combine_factor(f, c(order(percent)[1:3]))
df <- data.frame(a = LETTERS[sample(5, 15, replace=TRUE)], y = rnorm(15))  #
combine_factor(df$a, c(1,2,2,1,2))#
combine_factor(df$a, c(1:4, 1))#
(f <- reorder(df$a, df$y))#
percent <- tapply(abs(df$y), df$a, sum)#
combine_factor(f, c(order(percent)[1:3]))
(f <- reorder(df$a, df$y))
?reorder
set.seed(2342472)#
( x <- round(runif(10,1,7)) )
?runif
?ifelse
df <- data.frame(a = LETTERS[sample(5, 15, replace=TRUE)], y = rnorm(15)) combine_factor(df$a, c(1,2,2,1,2)) combine_factor(df$a, c(1:4, 1)) (f <- reorder(df$a, df$y))#
percent <- tapply(abs(df$y), df$a, sum) combine_factor(f, c(order(percent)[1:3]))
df <- data.frame(a = LETTERS[sample(5, 15, replace=TRUE)], y = rnorm(15))
df
df <- data.frame(a = LETTERS[sample(8, 30, replace=TRUE)], y = rnorm(30))
df
combine_factor(df$a, variable = c(1, 2, 3, other))
combine_factor(df$a, variable = c(1, 2, 3, "other"))
df$a
combine_factor(df$a, variable = c(1, 2, 3))
?combine_factor
?reorder
?count
?plyr
library(plyr)
?plyr
??plyr
?join
??margin
library()
library(ggplot2)
with(baseball)
with("baseball")
data(baseball)
baseball
summary(baseball)
str(baseball)
x <- ddply(baseball, .(year))
summary(x)
str(x)
nmissing <- function(x) sum(is.na(x))
colwise(nmissing)(baseball)
?diff
??diff
library(plyr)
?join
RColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
library(plyr)
?as.data.frame
?as.data.frame(mean)
library(xtable)
?xtable
help.search("effect size")
TukeyHSD
x <- data.frame(4 = (1:10), 5 = (11:20))
x <- data.frame(x = (1:10), y = (11:20))
x
names(x)
??cronbach
??"internal consistency"
library(xtable)
?xtable
data(chem97)
data(Chem97)
?ecdf
data(cars)
cars
library(ggplot2)
qplot(ecdf(dist), data=cars)
?ecdf
x <- ecdf(cars$dist)
x
qplot(x)
plot(x)
cars.ecdf <- ddply(cars, .(dist, speed), transform, ecdf = ecdf(dist))
cars.ecdf <- ddply(cars, .(dist, speed), transform, ecdf = ecdf(dist)(speed))
cars.ecdf
library(ggplot2)
data(mtcars)
p <- ggplot(aes(x = hp, y = mpg, fill = factor(cyl)), data = mtcars)
p
p + geom_point()
qplot(mpg, hp, fill = factor(cyl))
qplot(mpg, hp, fill = factor(cyl), data = mtcars)
?min
library(granova)
# Required Libraries#
library(ggplot2)#
library(granova)#
library(DAAG)#
#
# Loading in the data#
data(pair65)#
str(pair65)#
#
# Setting the lower and upperbounds#
xlowerbound <- min(pair65$heated)#
ylowerbound <- min(pair65$ambient)#
                   #
xupperbound <- max(pair65$heated)#
yupperbound <- max(pair65$ambient)#
#
xlimits <- c(xlowerbound, xupperbound)#
ylimits <- c(ylowerbound, yupperbound)#
#
# Plotting the standard granova plot#
granova.ds(pair65,#
  main = "Dependent sample assessment plot for pair65 data, n = 9")#
  #
# Trying to get the same plot in ggplot2#
p <- ggplot(aes(x = heated, y = ambient), #
              data = pair65,#
              xlim = xlimits, #
              ylim = ylimits)#
              #
p <- p + geom_point()#
#
# Adding the y=x line#
p <- p + geom_abline(slope = 1, intercept = 0)#
#
# Forcing coordinates to be equal#
p + coord_equal()
# Required Libraries#
library(ggplot2)#
library(granova)#
library(DAAG)#
#
# Loading in the data#
data(pair65)#
str(pair65)#
#
# Defining the Function#
#
granova.ds.bd <- function(data = NULL) {#
  dd <- data.frame(#
          xvals  = data[ , 1], #
          yvals  = data[ , 2],#
          effect = (data[ , 2]  - data[ , 1])#
        )  #
  str(dd)#
#
  # Computing Some Statistics#
  effectQuantiles <- quantile(dd$effect, probs = c(0, 0.025, 0.5, 0.975, 1))#
#
  dsttest <- t.test(dd$yvals, dd$xvals, #
                   paired     = TRUE,#
                   conf.level = 0.95)#
#
  (meanTreatmentEffect  <- dsttest$estimate)#
  (upperTreatmentEffect <- dsttest$conf.int[1])#
  (lowerTreatmentEffect <- dsttest$conf.int[2])#
#
  lm1 <- lm(yvals ~ xvals, data = dd)#
  summary(lm1)#
  meanTreatmentEffect#
#
  # Setting the graphicalbounds#
  extrema  <- c(range(dd$xvals), range(dd$yvals))#
  offset   <- (max(extrema) - min(extrema)) / 10#
  bounds   <- c(min(extrema) - 5*offset, max(extrema) + offset)#
  (perpendicularIntercept <- 2*(min(dd$yvals)) - offset)#
  shadowOffset <- offset/6#
#
  # Computing point shadows#
  xshadow <- (((dd$xvals - dd$yvals) + perpendicularIntercept) /2) + shadowOffset#
  yshadow <- (xshadow) + (dd$yvals - dd$xvals)#
#
  xshadow#
  yshadow#
  # I have to name the resultant dataframe variables as "xvals" and "yvals" so#
  # that the subsequent geom_point(data = ddshadow) can inherit the dd dataframe#
  # column names and plot correctly (Wickham, ggplot2 book, p. 63)#
  ddshadow <- data.frame(xvals = xshadow, yvals = yshadow)#
  ddshadow#
#
  # Plotting the standard granova plot#
  granova.ds(pair65,#
    main = "Dependent sample assessment plot for pair65 data, n = 9")#
  #
  ## Trying to get the same plot in ggplot2#
  p <- ggplot(aes(x = xvals, y = yvals), #
                data = dd)#
              #
  p <- p + geom_point(size = I(3)) + xlim(bounds) + ylim(bounds)#
#
  # Adding the y=x line#
  p <- p + geom_abline(slope = 1, intercept = 0)#
#
  # Forcing coordinates to be equal#
  p <- p + coord_equal()#
#
  # Adding a rugplot#
  p <- p + geom_rug(alpha = I(2/3))#
#
  # Adding a perpendicular cross-section#
  p <- p + geom_abline(intercept = perpendicularIntercept, #
                       slope     = -1)#
                #
  # Adding group mean lines#
  p <- p + geom_hline(yintercept = mean(dd$yvals), #
                      colour     = "red",#
                      alpha      = 1/2,#
                      linetype   = 3)#
                    #
  p <- p + geom_vline(xintercept = mean(dd$xvals), #
                      colour     = "red",#
                      alpha      = 1/2,#
                      linetype   = 3) #
#
  # Adding the treatment effect line#
  p <- p + geom_abline(intercept = meanTreatmentEffect,#
                       slope     = 1,#
                       color     = "red",#
                       alpha     = 1,#
                       linetype  = 2)#
                     #
  # Plotting point shadows#
  p <- p + geom_point(#
             data  = ddshadow, #
             color = "black", #
             size  = I(3),#
             alpha = I(1/2) #
           )#
#
  # Plotting the point trails#
  p <- p + geom_segment(#
             aes(#
               x = dd$xvals,#
               y = dd$yvals,#
               xend = ddshadow$xvals,#
               yend = ddshadow$yvals           #
           #
             ), size     = I(1),#
                color    = "black",#
                linetype = 3,#
                alpha    = I(1/4), #
           )#
#
#
  # Plotting the 95% Confidence band#
  p <- p + geom_segment(#
             aes(#
               x    = ((perpendicularIntercept - lowerTreatmentEffect) / 2) #
                       - shadowOffset,#
               y    = ((perpendicularIntercept + lowerTreatmentEffect) / 2) #
                       - shadowOffset,#
               xend = ((perpendicularIntercept - upperTreatmentEffect) / 2) #
                       - shadowOffset,#
               yend = ((perpendicularIntercept + upperTreatmentEffect) / 2) #
                       - shadowOffset#
                #
             ), size  = I(2),#
                color = "darkgreen",#
                alpha = I(1),#
             #
           )#
     #
  p#
#
  # Removing the gridlines and background#
  p +#
    opts(panel.grid.major = theme_blank()) +  #
    opts(panel.grid.minor = theme_blank()) +#
    opts(panel.background = theme_blank()) + #
    opts(axis.line = theme_segment()) +#
    opts(title = "Dependent Sample Scatterplot for pair65 data")  #
  #
}#
#
granova.ds.bd(pair65)
traceback()
ColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
library(ggplot2)
ColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
RColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
?duplicated
duplicated
??unique
??duplicate
?unique
?anyDuplicated
RColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
library(ggplot2)
aes
aes_string()
aes_string
RColorBrewer::display.brewer.all(n=8, exact.n=FALSE)
x <- "fear"
x
paste(x)
library(pair65)
library(mass)
library(MASS)
pair65
data(pair65)
data(cars)
cars
names(cars)
str(cars)
?round
pi
round(pi, digits = 25)
library(aplpack)
crossbowStyle <- c("color = "black"", "size = 1", "alpha = 0.5", "linetype = 1")
crossbowStyle <- c("color = "black", "size = 1", "alpha = 0.5", "linetype = 1")
setwd("~/Dropbox/Brian-Wil/programming/granova/R/")
# For plot comparisons#
library(granova)#
#
# Custom functions#
source("granova.ds.bd.R")#
trace("granova.ds.bd", browser, exit = browser)#
# pdf("PruzekTestPlots.pdf", onefile = TRUE)#
#
x <- rnorm(mean = 42, n = 25)#
y <- rnorm(mean = 45, n = 25)#
testFrame1 <- data.frame(MathPreTest = x, MathPostTest = y)#
#
#
x <- rnorm(mean = 534, n = 25, sd = 100)#
y <- rnorm(mean = 517, n = 25, sd = 100)#
testFrame2 <- data.frame(SATVerbalPre = x, SATVerbalPost = y)#
#
print(granova.ds.bd(testFrame1, conf.level = 0.95))#
print(granova.ds.bd(testFrame2, conf.level = 0.50))#
#
print(granova.ds.bd(testFrame2, plotTitle = "awesomeSauce"))#
#
dev.off()
# For plot comparisons#
library(granova)#
#
# Custom functions#
source("granova.ds.bd.R")#
trace("granova.ds.bd", browser, exit = browser)#
# pdf("PruzekTestPlots.pdf", onefile = TRUE)#
#
x <- rnorm(mean = 42, n = 25)#
y <- rnorm(mean = 45, n = 25)#
testFrame1 <- data.frame(MathPreTest = x, MathPostTest = y)#
#
#
x <- rnorm(mean = 534, n = 25, sd = 100)#
y <- rnorm(mean = 517, n = 25, sd = 100)#
testFrame2 <- data.frame(SATVerbalPre = x, SATVerbalPost = y)#
#
granova.ds.bd(testFrame1, conf.level = 0.95)#
print(granova.ds.bd(testFrame2, conf.level = 0.50))#
#
print(granova.ds.bd(testFrame2, plotTitle = "awesomeSauce"))#
#
dev.off()
# For plot comparisons#
library(granova)#
#
# Custom functions#
source("granova.ds.bd.R")#
trace("granova.ds.bd", browser, exit = browser)#
# pdf("PruzekTestPlots.pdf", onefile = TRUE)#
#
x <- rnorm(mean = 42, n = 25)#
y <- rnorm(mean = 45, n = 25)#
testFrame1 <- data.frame(MathPreTest = x, MathPostTest = y)#
#
#
x <- rnorm(mean = 534, n = 25, sd = 100)#
y <- rnorm(mean = 517, n = 25, sd = 100)#
testFrame2 <- data.frame(SATVerbalPre = x, SATVerbalPost = y)#
#
granova.ds.bd(testFrame1, conf.level = 0.95)
n
dd
dd
dd
# For plot comparisons#
library(granova)#
#
# Custom functions#
source("granova.ds.bd.R")#
trace("granova.ds.bd", browser, exit = browser)#
# pdf("PruzekTestPlots.pdf", onefile = TRUE)#
#
x <- rnorm(mean = 42, n = 25)#
y <- rnorm(mean = 45, n = 25)#
testFrame1 <- data.frame(MathPreTest = x, MathPostTest = y)#
#
#
x <- rnorm(mean = 534, n = 25, sd = 100)#
y <- rnorm(mean = 517, n = 25, sd = 100)#
testFrame2 <- data.frame(SATVerbalPre = x, SATVerbalPost = y)#
#
granova.ds.bd(testFrame1, conf.level = 0.95)
n
dd
dd
dd
treatmentLine
p
p
p
p
p
p
p
p
p
p
p
confidenceBand
confidenceBand
p
p
# For plot comparisons#
library(granova)#
#
# Custom functions#
source("granova.ds.bd.R")#
trace("granova.ds.bd", browser, exit = browser)#
# pdf("PruzekTestPlots.pdf", onefile = TRUE)#
#
x <- rnorm(mean = 42, n = 25)#
y <- rnorm(mean = 45, n = 25)#
testFrame1 <- data.frame(MathPreTest = x, MathPostTest = y)#
#
#
x <- rnorm(mean = 534, n = 25, sd = 100)#
y <- rnorm(mean = 517, n = 25, sd = 100)#
testFrame2 <- data.frame(SATVerbalPre = x, SATVerbalPost = y)#
#
granova.ds.bd(testFrame1, conf.level = 0.95)
n
dd
dd
p
p
p
p
p
p
p
p
p
p
p
p
# For plot comparisons#
library(granova)#
#
# Custom functions#
source("granova.ds.bd.R")#
trace("granova.ds.bd", browser, exit = browser)#
# pdf("PruzekTestPlots.pdf", onefile = TRUE)#
#
x <- rnorm(mean = 42, n = 25)#
y <- rnorm(mean = 45, n = 25)#
testFrame1 <- data.frame(MathPreTest = x, MathPostTest = y)#
#
#
x <- rnorm(mean = 534, n = 25, sd = 100)#
y <- rnorm(mean = 517, n = 25, sd = 100)#
testFrame2 <- data.frame(SATVerbalPre = x, SATVerbalPost = y)#
#
granova.ds.bd(testFrame1, conf.level = 0.95)
n
p
p
p
p
p
p
p
p
p
p
p
